//| mill-version: 1.0.2
//| mill-jvm-version: 11
import mill.*
import mill.T
import mill.javalib.TestModule.ScalaTest
import mill.javalib.publish.License
import mill.scalalib.Assembly.Rule
import mill.scalalib.publish.{Developer, PomSettings, VersionControl}
import scalalib.*
import scalajslib.*

trait AppScalaModule extends SbtModule with PublishModule {
  def scalaVersion = "3.7.1"
  override def publishVersion: T[String] = Task("0.4.2")
  override def pomSettings: T[PomSettings] = Task(
    PomSettings(
      description = "Expression (line based) calculator",
      organization = "com.github.ondrejspanel",
      url = "https://github.com/OndrejSpanel/FormulaFX",
      licenses = Seq(License.`GPL-2.0+`),
      versionControl = VersionControl.github("OndrejSpanel", "FormulaFX"),
      developers = Seq(
        Developer(
          id = "OndrejSpanel",
          name = "Ondřej Španěl",
          url = "https://github.com/OndrejSpanel"
        )
      )
    )
  )
}

trait AppScalaJSModule extends AppScalaModule with ScalaJSModule {
  def scalaJSVersion = "1.19.0"
}

object `package` extends Module {

  object shared extends Module {
    trait SharedModule extends AppScalaModule with PlatformScalaModule {
      override def mvnDeps = Seq(
        mvn"org.scala-lang.modules::scala-parser-combinators::2.4.0"
      )
    }

    object jvm extends SharedModule {
      object test extends jvm.SbtTests with ScalaTest {
        override def scalaTestVersion: T[String] = Task("3.2.19")
      }
    }
    object js extends SharedModule with AppScalaJSModule
  }

  object jvm extends AppScalaModule {
    override def moduleDeps = Seq(shared.jvm)
    override def mvnDeps = Seq(
      mvn"org.scala-lang.modules::scala-swing:3.0.0"
    )

    override def prependShellScript: T[String] = Task { "" }
    override def assemblyRules = super.assemblyRules ++ Seq(
      Rule.ExcludePattern(".*\\.tasty")
    )

    def assembly: T[PathRef] = Task {
      val dest = Task.dest / "FormulaFx.jar"
      os.copy(super.assembly().path, dest)
      PathRef(dest)
    }
  }

  object js extends AppScalaJSModule {
    override def scalaJSVersion = "1.19.0"
    override def moduleDeps = Seq(shared.js)
    override def mvnDeps = Seq(
      mvn"org.scala-js::scalajs-dom::2.8.0"
    )

    def generateIndexOpt: T[os.Path] = Task(generateIndex("index.html", "opt"))

    def generateIndexFastOpt: T[os.Path] = Task(generateIndex("index-fast.html", "fastOpt"))

    def generateIndex(index: String, suffix: String)(implicit ctx: mill.api.TaskCtx): os.Path = {
      val source = ctx.workspace / "js" / "index.html"
      val target = Task.dest / index
      ctx.log.info(s"Index $source -> $target")
      os.makeDir.all(Task.dest)
      val content = os.read.lines(source).map { line =>
        line.replace("{{target-js}}", s"formulafx-$suffix.js")
      }
      os.write(target, content.mkString("\n"))
      ctx.log.info(s"Generated $index with suffix: $suffix")
      target
    }

    def bundleFast = Task {
      (fastLinkJS(), generateIndexFastOpt())
    }

    def bundleOpt = Task {
      (fullLinkJS(), generateIndexOpt())
    }
  }
}